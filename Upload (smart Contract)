// SPDX-License-Identifier: MIT
pragma solidity >=0.7.0 <0.9.0;

struct Access{
    address user;
    bool access;
}
contract Upload{
       
    mapping(address => string[]) images;
    mapping(address => Access[]) accessList;
    mapping(address => mapping(address =>bool)) ownership ;
    mapping(address => mapping(address => bool))previousData; 
    
    function add(address _user ,string memory url) external {
      images[_user].push(url);
    }

    function allowance(address _user) external {
        ownership[msg.sender][_user] = true;
        if(previousData[msg.sender][_user]){
            for(uint i=0;i<accessList[msg.sender].length ;i++){
                if(accessList[msg.sender][i].user == _user)
                accessList[msg.sender][i].access = true;
            }
        }
        else{
            accessList[msg.sender].push(Access(_user,true));
            previousData[msg.sender][_user] = true;
        }
    }

    function disallow(address _user) external {
        ownership[msg.sender][_user] = false;
        for(uint i=0;i<accessList[msg.sender].length;i++){
            if(accessList[msg.sender][i].user == _user){
                accessList[msg.sender][i].access = false;
            }
        }
    }

    function display(address _user) external view returns(string[] memory){
        require(msg.sender == _user || ownership[_user][msg.sender],"You dont have access");
        return images[_user];
    }

    function shareAccess() public view returns(Access[] memory){
      return accessList[msg.sender];
    }
}
